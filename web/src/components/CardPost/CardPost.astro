---
import type { Data } from "@/common/astro";
import ImageOptimized from "@/common/modules/ImageOptimized.astro";
import { getFirstPhoto } from "@/common/sanity/getOptimizedImage";
import type { Summary, Theme } from "@/common/sanity/sanity.types";
import type { Base } from "@/common/types";
import { formatDate } from "@/common/utils/formDate";
import { getHtmlSimpleCopy } from "@/common/utils/get-html-render";
import type { AuthorEntry } from "@/contexts/Blog/infraestructure/sanity-author-blog-collection";
import type { CategoryEntry } from "@/contexts/Blog/infraestructure/sanity-category-blog-collection";
import type { PostEntry } from "@/contexts/Blog/infraestructure/sanity-post-blog-collection";
import { getCollection } from "astro:content";
import { getEntry } from "astro:content";

type props = {
  _id: string;
};

const { _id } = Astro.props as props;

const getPostById = (await getEntry("Post", _id)) as Data<PostEntry>;

const summary = getPostById.data.summary as Base<Summary>;

if (!summary) return null;

const bgVideo = summary.mediaList?.filter((media) => media._type == "video")[0];

const optimizedImage = getFirstPhoto(summary.mediaList || []);

const theme = getPostById.data?.theme;
const category = getPostById.data?.category;
const author = getPostById.data?.author;

const getCategoryById = (await getCollection("Category", (cat) => {
  return cat.id === category?._ref;
})) as Data<CategoryEntry>[];

const getAuthorById = (await getCollection("Author", (aut) => {
  return aut.id === author?._ref;
})) as Data<AuthorEntry>[];

const cardInfo = getHtmlSimpleCopy(summary?.text);
const cardTitle = getHtmlSimpleCopy(summary?.title, "h3");
---

<article
  class="m-card-post"
  text-color={theme?.textColor}
  background-color={theme?.backgroundColor}
>
  {
    summary.mediaList ? (
      bgVideo ? (
        <div class="card-post__media-canvas">
          <video
            class="card-post__media-video"
            autoplay
            loop
            muted
            playsinline
            src={bgVideo?.srcLaptop}
          >
            <source id="video-hero-source" type="video/mp4" />
          </video>
        </div>
      ) : (
        <div class="card-post__media-canvas">
          <ImageOptimized
            class="card-post__media-img"
            photo={optimizedImage?.photo}
          />
        </div>
      )
    ) : (
      ""
    )
  }

  <div class="card-post__data">
    <a href={getPostById.data.slug} class="card-post__title">
      <h3 set:html={cardTitle} />
    </a>
    <span class="card-post__date">
      {formatDate(getPostById.data._updatedAt)}
    </span>
    <span class="card-post__author">
      {getAuthorById[0].data.name}
      {getAuthorById[0].data.job}
    </span>
    <div class="card-post__copy" set:html={cardInfo} />
    <div class="card-post__categories">
      {
        getCategoryById.map((category) => {
          return (
            <a
              href={category.data.slug}
              class="card-post__category-name"
              set:html={category.data.name}
            />
          );
        })
      }
    </div>
  </div>
</article>

<script>
  import { navigate } from "astro:transitions/client";
  const cardPosts = document.querySelectorAll(".m-card-post");

  cardPosts.forEach((cardPost) => {
    const card = cardPost as HTMLDivElement;

    const backgroundColor = card.getAttribute("background-color");
    const textColor = card.getAttribute("text-color");

    card.style.cursor = "pointer";
    card.style.setProperty("--c-background-color", backgroundColor);
    card.style.setProperty("--c-text-color", textColor);
  });

  cardPosts.forEach((cardPost) => {
    cardPost.addEventListener("click", () => {
      const link = cardPost.querySelector("a") as HTMLAnchorElement;
      navigate(link.href);
    });
  });
</script>
