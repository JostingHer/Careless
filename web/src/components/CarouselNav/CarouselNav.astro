---
interface Props {
  carouselId: string;
  offsetLeft?: number;
}

const { carouselId, offsetLeft } = Astro.props;

const moveScroll = offsetLeft || 300;
---

<astro-carousel-nav>
  <div id={`carousel-nav-${carouselId}`} class={`m-carousel-nav`}>
    <button
      id={`carousel-nav-button-preview-${carouselId}`}
      aria-label={`desplazar a la izquierda`}
      class={`carousel-nav__button`}
    >
      <svg
        class={"preview-svg"}
        width="20"
        height="20"
        viewBox="0 0 20 20"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M13.9793 4.73947C13.9781 3.96637 13.1404 3.48454 12.4715 3.87218L2.93971 9.39597C2.27081 9.78361 2.27238 10.75 2.94253 11.1354L12.4922 16.6283C13.1623 17.0138 13.9984 16.5292 13.9972 15.7561L13.9793 4.73947Z"
          fill="white"></path>
      </svg>
    </button>
    <button
      id={`carousel-nav-button-next-${carouselId}`}
      aria-label={`desplazar a la derecha`}
      class={`carousel-nav__button`}
    >
      <svg
        class={"next-svg"}
        width="20"
        height="20"
        viewBox="0 0 20 20"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M6.02067 4.73947C6.02193 3.96637 6.85961 3.48454 7.52851 3.87218L17.0603 9.39597C17.7292 9.78361 17.7276 10.75 17.0575 11.1354L7.50784 16.6283C6.83769 17.0138 6.00157 16.5292 6.00282 15.7561L6.02067 4.73947Z"
          fill="white"></path>
      </svg>
    </button>
  </div>
</astro-carousel-nav>

<script define:vars={{ carouselId, moveScroll }}>
  class CarouselNav extends HTMLElement {
    carousel;
    nav;
    preview;
    next;

    constructor() {
      super();
      this.nav = this.querySelector(`#carousel-nav-${carouselId}`);
      this.carousel = document.getElementById(`${carouselId}`);
      this.next = this.querySelector(`#carousel-nav-button-next-${carouselId}`);
      this.preview = this.querySelector(
        `#carousel-nav-button-preview-${carouselId}`
      );

      this.next?.addEventListener("click", () => {
        this.carousel.scrollLeft += moveScroll;
      });

      this.preview?.addEventListener("click", () => {
        this.carousel.scrollLeft -= moveScroll;
      });
      if (this.carousel) {
        const checkButtonState = () => {
          if (this.carousel.scrollLeft <= 0) {
            this.preview?.classList.add("carousel-nav__button--disable");
          } else {
            this.preview?.classList.remove("carousel-nav__button--disable");
          }

          if (
            this.carousel.scrollLeft + this.carousel.clientWidth >=
            this.carousel.scrollWidth
          ) {
            this.next?.classList.add("carousel-nav__button--disable");
          } else {
            this.next?.classList.remove("carousel-nav__button--disable");
          }
        };

        this.carousel.addEventListener("scroll", checkButtonState);

        checkButtonState();
      }
    }
  }

  if (!customElements.get("astro-carousel-nav")) {
    customElements.define("astro-carousel-nav", CarouselNav);
  }
</script>
