---
import type { Data, SharedContext } from "@/common/astro";
import { arrow_svg, globe_svg } from "./language-selector-elements";
import type { LANGUAGE } from "@global-shared/translations/domain/languages";
import { DEFAULT_LANGUAGE } from "@global-shared/translations/domain/languages";
import {
  getLanguageTitle,
  getSlugWithLang,
} from "@global-shared/translations/utils/getSlugWithLang";
import { getCollection } from "astro:content";
import type { LandingPage } from "@/common/types";
import { getEntry } from "astro:content";

type Props = SharedContext;

const { id, ref, language = DEFAULT_LANGUAGE, collection } = Astro.props;

const { data } = (await getEntry(collection, id)) as Data<LandingPage>;

const reference = data.ref;

const current_page_other_lang = (await getCollection(collection, ({ data }) => {
  return data.ref === reference;
})) as Data<LandingPage>[];

const listLinks = current_page_other_lang.map(({ data }) => ({
  lang: data.language,
  link: data.slug,
}));
---

<h1>hola</h1>
<p>
  Lorsque les équipes de Razorpay oubliaient de petits détails, le head of
  design, Saurabh Soni, savait que le problème n'était pas la qualité, mais la
  communication. « Avant le déploiement de Blade [notre design system], il était
  facile de passer à côté de nombreuses subtilités, comme les différents états
  de boutons ou la façon dont une erreur dans un champ de texte doit être
  traitée, » explique Saurabh. Les développeurs essayaient de coder en dur et de
  tout construire manuellement, risquant des oublis. »
</p>
<p>
  Ce challenge se retrouve dans toutes les organisations. « On peut dire que les
  designers et les développeurs parlent une langue différente », explique Lukas
  Oppermann, staff system designer chez GitHub. Ce fossé linguistique entraîne
  souvent des conventions de nommage et des propriétés de composants
  incohérentes, mais aussi des attentes divergentes quant à l'apparence et à
  l'expérience utilisateur d'un produit. Une bonne documentation comble cette
  lacune en faisant le lien entre l’intention et la mise en œuvre. Mais la
  documentation ne doit pas se contenter de cataloguer des composants : elle
  doit saisir le comment et le pourquoi des décisions de design. Sans ces guides
  complets, même les design systems soigneusement conçus accumulent de la
  poussière numérique.
</p>

<details class="m-language-selector">
  <summary class="language-selector__summary">
    <span set:html={globe_svg} />
    {getLanguageTitle(language)}
    <span set:html={arrow_svg} />
  </summary>
  <div class="language-selector__list">
    {
      listLinks.map((link) => (
        <a
          href={link.link}
          class={`language-selector__button ${
            language === link.lang
              ? "language-selector__button--active"
              : "language-selector__button--no-active"
          }`}
        >
          {getLanguageTitle(link.lang)}
        </a>
      ))
    }
  </div>
</details>

<pre>
  <code>
    {JSON.stringify(listLinks, null, 2)}
  </code>
</pre>
