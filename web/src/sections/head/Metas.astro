---
import type { CollectionEntry } from "astro:content";
import type { CollectionKey } from "astro:content";
import { getEntry } from "astro:content";
import type { Data } from "@/common/astro";
import type { LandingPage } from "@/common/types";
import {
  DEFAULT_LANGUAGE,
  type LANGUAGE,
} from "@global-shared/translations/domain/languages";
import { getCollection } from "astro:content";
import { getSlugWithLang } from "@global-shared/translations/utils/getSlugWithLang";

type Props = {
  id: string;
  ref: string;
  language: LANGUAGE;
  collection: CollectionKey;
};
const { id, ref, language = DEFAULT_LANGUAGE, collection } = Astro.props;

const canonicalURL = new URL(Astro.url, Astro.site);
// const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const entry = (await getEntry(collection, id)) as Data<LandingPage>;

// if (!entry.data.metas) return;

const { metas } = entry.data;

const title = metas?.title || entry.data.name || "JostingHernandez.com";

let image =
  entry.data.metas?.thumbnail?.asset?.url ||
  new URL("assets/images/placeholder.jpg", Astro.url);

const current_page_other_lang = await getCollection(collection, ({ data }) => {
  return data.ref === ref;
});

const hrefLangList = current_page_other_lang.map(({ data }) => ({
  lang: data.language as LANGUAGE,
  link: getSlugWithLang(data.slug, data.language),
}));
---

<pre>
  <code>
    {JSON.stringify(hrefLangList, null, 2)}
  </code>
</pre>

<title>{`${title}`}</title>
<meta name="title" content={`${title}`} />
<meta name="description" content={`${metas?.description}`} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={metas?.description} />
<meta property="og:image" content={image} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={metas?.description} />
<meta property="twitter:image" content={image} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />


<!-- Link URL multilang -->
<link rel="alternate" href={canonicalURL} hreflang={language} />
{
  hrefLangList.map((link) => {
    if (link.lang === DEFAULT_LANGUAGE) {
        return (
        <link
            rel="alternate"
            href={link.link}
            hreflang="x-default"
          />
          <link
            rel="alternate"
            href={link.link}
            hreflang={`${DEFAULT_LANGUAGE}`}
          />
        )
    };
    return(
      <link rel="alternate" href={link.link} hreflang={link.lang} />
    )

  })
}