import fs from "fs";

let pathsToUse = [];

const searchForScssFiles = (directoryPath) => {
    const files = fs.readdirSync(directoryPath);
    for (const file of files) {
        const path = `${directoryPath}/${file}`;
        if (fs.lstatSync(path).isDirectory()) {
            if (file !== "styles") {
                searchForScssFiles(path);
            }
        } else {
            if (path.endsWith(".scss")) {
                pathsToUse = [...pathsToUse, path];
            }
        }
    }
    return pathsToUse;
};

export async function AutoImportsCSSFromDirectories(path) {
    pathsToUse = [];
    if (Array.isArray(path)) {
        let allUsePaths = [];
        for (const p of path) {
            allUsePaths = [...allUsePaths, ...searchForScssFiles(p)];
        }
        writeUsesInDocument(allUsePaths);
    } else {
        const allUsePaths = searchForScssFiles(path);
        writeUsesInDocument(allUsePaths);
    }
}

function writeUsesInDocument(allUsePaths) {
    const imports = allUsePaths.map((file) => {
        const path = file.replace("./src", "src");
        return `@use "${path}";`;
    });
    imports.unshift(
        `// File autogenerated by gatsby-node.ts in function autoImportCSS`,
    );
    const linesToWrite = imports.join("\n");
    fs.writeFileSync("./src/styles/components/_modules.scss", linesToWrite);
}
