---
import { arrow_svg, globe_svg } from "./language-selector-elements";
import type { LANGUAGE } from "@global-shared/translations/domain/languages";
import { DEFAULT_LANGUAGE } from "@global-shared/translations/domain/languages";
import {
  getLanguageTitle,
  getSlugWithLang,
} from "@global-shared/translations/utils/getSlugWithLang";
import type { CollectionKey } from "astro:content";
import { getCollection } from "astro:content";

type Props = {
  id: string;
  ref: string;
  language: LANGUAGE;
  collection: CollectionKey;
};
const { id, ref, language = DEFAULT_LANGUAGE, collection } = Astro.props;

const current_page_other_lang = await getCollection(collection, ({ data }) => {
  return data.ref === ref;
});

const listLinks = current_page_other_lang.map(({ data }) => ({
  lang: data.language as LANGUAGE,
  link: getSlugWithLang(data.slug, data.language),
}));
---

<details class="m-language-selector">
  <summary class="language-selector__summary">
    <span set:html={globe_svg} />
    {getLanguageTitle(language)}
    <span set:html={arrow_svg} />
  </summary>
  <div class="language-selector__list">
    {
      listLinks.map((link) => (
        <a
          href={link.link}
          class={`language-selector__button ${
            language === link.lang
              ? "language-selector__button--active"
              : "language-selector__button--no-active"
          }`}
        >
          {getLanguageTitle(link.lang)}
        </a>
      ))
    }
  </div>
</details>

<pre>
  <code>
    {JSON.stringify(listLinks, null, 2)}
  </code>
</pre>
